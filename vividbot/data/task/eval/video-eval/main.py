import json
import time
import google.generativeai as genai
import os
from google.generativeai.types import HarmBlockThreshold, HarmCategory

genai.configure(api_key="AIzaSyDT5b0gm1ihR5flW8Rt5HJqF4MJbRbHEqY")

BASE_DATA_PATH = "/home/dminhvu/data/eval/video-eval"


def main():
  data_files = [
    os.path.join(BASE_DATA_PATH, d)
    for d in ["conversation.jsonl", "description.jsonl", "reasoning.jsonl"]
  ]

  for data_file in data_files:
    data = [json.loads(line) for line in open(data_file, "r").readlines()]

    for d in data:
      new_data = d.copy()
      video = d["video"]
      conv = d["conversations"]
      video_file = None
      google_file_name = f"files/{video.replace('.mp4', '')}".lower().replace("_", "-")

      try:
        video_file = genai.get_file(name=google_file_name)
      except Exception as e:
        print(f"Couldn't get video file {google_file_name}: {e}")

      if video_file is None or not video_file.state.name == "ACTIVE":
        if video_file and not video_file.state.name == "ACTIVE":
          genai.delete_file(name=video_file.name)

        video_file = genai.upload_file(
          path=f"{BASE_DATA_PATH}/videos/{video}",
          name=google_file_name,
          display_name=video,
        )

      while video_file and video_file.state.name == "PROCESSING":
        time.sleep(10)
        video_file = genai.get_file(video_file.name)

      if video_file and video_file.state.name == "ACTIVE":
        describer = genai.GenerativeModel(
          "models/gemini-1.5-flash",
          generation_config={
            "temperature": 0.2,
            "max_output_tokens": 512,
          },
          safety_settings={
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
          },
          system_instruction="""You're a scorer for a Large Multimodal Model.
You're given a video, and the conversation about the video which was generated by a model.
The conversation is a list of questions and answers where questions are from humans and answers are from the model and in turn.
You need to score the model's answers based on the human's questions and the content of the video.
The following criteria should be used for scoring:
- Accuracy, 2pts, where the answer is correct and relevant to the question
- Fluency, 2pts, where the answer is coherent and grammatically correct
- Comprehensiveness, 2pts, where the answer is complete and detailed
- Creativity, 2pts, where the answer is original and imaginative
- Clarity, 2pts, where the answer is clear and easy to understand
In total, you can give 0-10 points to the whole conversation. And you should provide a concise comment for your score.
You need to respond in the following JSON format:
\{"score": 10, "comment": "Your comments here."\}
Please return the above JSON format as your response, don't tell anything else. Avoid using any harmful or inappropriate language.
""",
        )

        try:
          describer_response = describer.generate_content(
            [
              video_file,
              f"Evaluate and score the model as instructed. The conversation is:\n\n{json.dumps(conv, ensure_ascii=False)}",
            ],
            request_options={
              "timeout": 60,
            },
          )

          json_text = (
            describer_response.text
            if describer_response.text
            else str(describer_response.parts[0].text).encode("utf-8").decode("utf-8")
            if describer_response.parts and len(describer_response.parts) > 0
            else str(describer_response.candidates[0].content.parts[0].text)
            .encode("utf-8")
            .decode("utf-8")
            if describer_response.candidates
            and len(describer_response.candidates) > 0
            and len(describer_response.candidates[0].content.parts) > 0
            else None
          )
          print(json_text)
          try:
            result = json.loads(json_text)
            new_data.update(result)
            with open(f"{data_file}_scored.jsonl", "a") as f:
              f.write(json.dumps(new_data, ensure_ascii=False) + "\n")
          except Exception:
            # give 5 points if the model fails to generate content
            with open(f"{data_file}_scored.jsonl", "a") as f:
              new_data.update(
                {"score": 5, "comment": "Model failed to generate content."}
              )
              f.write(json.dumps(new_data, ensure_ascii=False) + "\n")
        except Exception:
          # give 5 points if the model fails to generate content
          with open(f"{data_file}_scored.jsonl", "a") as f:
            new_data.update(
              {"score": 5, "comment": "Model failed to generate content."}
            )
            f.write(json.dumps(new_data, ensure_ascii=False) + "\n")


if __name__ == "__main__":
  main()
